// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// User authentication and profile
model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  avatar    String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  files     File[]
  folders   Folder[]
  sharedFiles SharedFile[]

  @@map("users")
}

// Folder structure for file organization
model Folder {
  id          String   @id @default(cuid())
  name        String
  description String?
  color       String?  // For visual organization
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  ownerId   String
  owner     User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  parentId  String?
  parent    Folder? @relation("FolderHierarchy", fields: [parentId], references: [id])
  children  Folder[] @relation("FolderHierarchy")
  
  files     File[]

  @@map("folders")
}

// Main file storage and metadata
model File {
  id              String   @id @default(cuid())
  name            String
  originalName    String
  mimeType        String
  size            Int      // Size in bytes
  pathOnDisk      String   // Local file path or cloud storage URL
  checksum        String?  // For file integrity verification
  createdAt       DateTime @default(now())
  updatedAt       DateTime @updatedAt
  
  // AI-generated metadata
  aiTags          String[] // AI-generated tags
  aiSummary       String?  // AI-generated summary
  aiKeywords      String[] // Extracted keywords
  ocrText         String?  // OCR text for images/PDFs
  processedAt     DateTime? // When AI processing completed
  processingStatus ProcessingStatus @default(PENDING)

  // Relations
  ownerId     String
  owner       User    @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  
  folderId    String?
  folder      Folder? @relation(fields: [folderId], references: [id])
  
  sharedFiles SharedFile[]
  versions    FileVersion[]

  @@map("files")
}

// File versioning for document history
model FileVersion {
  id          String   @id @default(cuid())
  versionNumber Int
  name        String
  size        Int
  pathOnDisk  String
  checksum    String
  createdAt   DateTime @default(now())
  
  fileId      String
  file        File @relation(fields: [fileId], references: [id], onDelete: Cascade)

  @@unique([fileId, versionNumber])
  @@map("file_versions")
}

// File sharing system
model SharedFile {
  id          String   @id @default(cuid())
  token       String   @unique // Secure sharing token
  expiresAt   DateTime?
  maxDownloads Int?
  downloadCount Int    @default(0)
  password    String?  // Optional password protection
  createdAt   DateTime @default(now())
  
  fileId      String
  file        File @relation(fields: [fileId], references: [id], onDelete: Cascade)
  
  sharedById  String
  sharedBy    User @relation(fields: [sharedById], references: [id])

  @@map("shared_files")
}

// AI processing job queue status
enum ProcessingStatus {
  PENDING
  PROCESSING
  COMPLETED
  FAILED
  SKIPPED
}

// Search and analytics
model SearchQuery {
  id          String   @id @default(cuid())
  query       String
  userId      String
  resultsCount Int
  createdAt   DateTime @default(now())

  @@map("search_queries")
}
